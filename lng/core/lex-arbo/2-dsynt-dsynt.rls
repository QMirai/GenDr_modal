
DSynt<=>DSynt abstract copy : rule
[
  leftside = [

  ]
  conditions = [

  ]
  rightside = [

  ]
  correspondence = [

  ]
]
/*Copy nodes from left to right*/
DSynt<=>DSynt node : copy
[
  leftside = [
l:?Xl
  ]
  conditions = [

  ]
  rightside = [
?Xr {
  <=> ?Xl
  dlex=?Xl.dlex
}
  ]
  correspondence = [

  ]
]
/*Copy edges from left to right, the first actant of controlled verbs, non fini verbs etc are hiden.
p --> q <=> not p or (p and q)
Si not FIN, alors not r=I
p : not ?Xl.finiteness=FIN;
q : not ?r=I;
( ?Xl.finiteness=FIN ) or ( not ?Xl.finiteness=FIN and not ?r=I )*/
DSynt<=>DSynt relation : copy
[
  leftside = [
?Xl {
  l:?r-> ?Yl
}
  ]
  conditions = [
// not ?Xl.finiteness=INF;
( ?Xl.finiteness=FIN and not ?r=I0 and not ?r=II0) or ( not ?Xl.finiteness=FIN and not ?r=I );
  ]
  rightside = [
rc:?Xr {
  rc:<=> ?Xl
  class = ?Xl.class
  ?r-> rc:?Yr {rc:<=> ?Yl}
}
  ]
  correspondence = [

  ]
]
/*Copy edges from left to right*/
DSynt<=>DSynt relation_body_part : copy
[
  leftside = [
?Xl {
  II-> ?Yl
  III-> ?Zl
}
  ]
  conditions = [
?Xl.dpos=V and lexicon::(?Yl.dlex).cat=body and ?Zl.dpos=N;
  ]
  rightside = [
rc:?Xr { rc:<=> ?Xl
  II-> rc:?Yr { rc:<=> ?Yl
    I-> rc:?Zr { rc:<=> ?Zl }
}
}
  ]
  correspondence = [

  ]
]
/*To realize the relation between the subject and the verb in proposition,
which is blocked by the rule "relation" (if INF, not ?r=I)*/
DSynt<=>DSynt relation_raising : copy
[
  leftside = [
?Xl {
  I0-> ?Yl {
    I-> ?Zl
  }
}
  ]
  conditions = [
// to target at "sembler"
//-----
//lexicon::(?Xl.dlex).(gp).(1)=I0; 
//?Yl.finiteness=INF;
  ]
  rightside = [
rc:?Xr { rc:<=> ?Xl
  I-> rc:?Zr { rc:<=> ?Zl }
  II-> rc:?Yr { rc:<=> ?Yl }
}
  ]
  correspondence = [

  ]
]
/*To realize the relation between the subject and the verb in proposition,
which is blocked by the rule "relation" (if INF, not ?r=I)*/
DSynt<=>DSynt relation_raising2 : copy
[
  leftside = [
?Xl {
  II0-> ?Yl {
    I-> ?Zl
  }
}
  ]
  conditions = [
// to target at "sembler"
//-----
//lexicon::(?Xl.dlex).(gp).(1)=I0; 
//?Yl.finiteness=INF;
  ]
  rightside = [
rc:?Xr { rc:<=> ?Xl
  II-> rc:?Yr { rc:<=> ?Yl 
                  I-> rc:?Zr { rc:<=> ?Zl }  
 }
}
  ]
  correspondence = [

  ]
]
/*Copy edges from left to right
p : lexicon::(?Xl.dlex).(gp).(1)=I0
q : not ?r=I0
( not lexicon::(?Xl.dlex).(gp).(1)=I0 ) or ( lexicon::(?Xl.dlex).(gp).(1)=I0 and not ?r=I0 )
( not p ) or ( p and q )*/
DSynt<=>DSynt disabled relation_raising_del_sj : copy
[
  leftside = [
?Xl {
  l:?r-> ?Yl
}
  ]
  conditions = [
// target at raising verbs
not ?r=I0;
  ]
  rightside = [
rc:?Xr {
  rc:<=> ?Xl
  ?r-> rc:?Yr {rc:<=> ?Yl
}
}
  ]
  correspondence = [

  ]
]
/*Copy edges from left to right*/
DSynt<=>DSynt disabled relation_with_sj : copy
[
  leftside = [
?Xl {
  l:?r-> ?Yl
}
  ]
  conditions = [
?Xl.finiteness=INF;
  ]
  rightside = [
rc:?Xr {
  rc:<=> ?Xl
  ?r-> ?Zr {
  dlex=?Yl.dlex
  dsynt=OK
  dpos=lexicon::(?Yl.dlex).dpos
//coref
  antecedent=?Yr.dlex
//  det=lexicon::(?Yl.dlex).(gp).(?R).(det)
//  definiteness=lexicon::(?Yl.dlex).(gp).(?R).(definiteness)
//  case=lexicon::(?Yl.dlex).(gp).(?R).(case)
}
}
rc:?Yr{
  rc:<=> ?Yl
}
  ]
  correspondence = [

  ]
]
/*Copy edges from left to right*/
DSynt<=>DSynt disabled relation_without_sj : copy
[
  leftside = [
?Xl {
  l:?r-> ?Yl
}
  ]
  conditions = [
?Xl.finiteness=INF;
not ?r=I;
  ]
  rightside = [
rc:?Xr {
  rc:<=> ?Xl
  ?r-> rc:?Yr {rc:<=> ?Yl
}
}
  ]
  correspondence = [

  ]
]