/*
Language : French (FRE)
Contents : Lexemes
Authors  : Yunpeng Qiao, François Lareau
Encoding : UTF-8
*/

lexicon {

META {
  lng = {
    name = French
    iso = FRE
  }
  defaults = {
    N = {
      definiteness = DEF
      number = SG
    }
    V = {
      mood = IND
      tense = PRES
      finiteness = INF
    }
 }
}

/*
=======================================================
                  DEFAULT ATTRIBUTES
=======================================================
*/

// ================= VERBS =================

// VERB
// ----

verb {
  dpos = V
  spos = verb
}

// ================= NOUNS =================

// NOUN
// ----
// Common nouns.
// By default, they don't have DSyntActs.

noun {
  dpos = N
  spos = noun
  countable = yes
  gp = { id=NONE dia=0}
}

noun_of : noun {
  gp = { id=N_de_N dia=1 }
//  gp = { id=Aposs_N dia=1 }
}

noun_in : noun {
  gp = { id=N_in_N dia=1 }
}

noun_body : noun {
  dpos = N_body
  gp = { id=N_body_N_person dia=1 }
}


// UNIT
// ----
// This is only for measurement units expressed as symbols.
// For example, "µg/m3", "l", "km", etc.

unit : noun {
  dpos = N
  spos = unit
  invariant = yes
}

// NUMBER
// ------
// For digital representation of numbers

number {
  dpos = Num
  spos = number
  invariant = yes
}

// AMOUNT
// ------
// Quantified units.
// e.g.: $500, 30m, 1.4µg, etc.

amount : unit {
  definiteness = NO
//  dpos = Num
}

// HOUR
// -----
// Used for the name of hours.

hour : proper_noun {
  dpos = hour
  spos = hour
  lf = { name = Locin
         value = at }
  invariant = yes
}

// MASS_NOUN
// ---------
// Not a part of speech.
// Used to mark common nouns that are not countable.

mass_noun : noun {
  massive = yes
  invariant = yes
  countable = no
  number=SG
}

// PROPER_NOUN
// -----------
// Proper nouns never have actants, but this is not expressed here.
// They are never countable.

proper_noun : noun {
  spos = proper_noun
   lf = { name=Locab value=from }
  countable = no
  invariant = yes
}

// ACRONYM 
// --------
// Acronyms are proper nouns but they can take determiners
// so we give them a different spos.

acronym : proper_noun {
 spos = acronym
}

//PLACE
// ----
// Class for places

place : proper_noun {
  spos=proper_noun
  lf = { name=Locad value=to }
  lf = { name=Locab value=from }
  lf = { name=Locin value=in }
}

// PRONOUN
// -------

pronoun : noun {
  spos = pronoun
}

//PERSONAL PRONOUN
personal_pronoun : pronoun {
 spos = personal_pronoun
 lf = { name=locad value=at }
 lf = { name=locad value=to }
}

// ================= ADJECTIVES =================

adjective_without_Oper1 {
  gp = { id=ADJ dia=1 }
  dpos = Adj  // ADV, which better?
  spos = adjective
}

adjective: adjective_without_Oper1 { //Yunpeng added
  lf = { name = Oper1
         value = être }
}

determiner : adjective_without_Oper1 {
  spos = determiner
}

possessive : adjective_without_Oper1 {
  dpos = Aposs
  spos = possessive
}

numeral : adjective_without_Oper1 {
  spos = numeral
}

// ================= ADVERBS =================

adverb {
  gp = { id=ADV dia=1 }
  dpos = Adv
  spos = adverb
  invariant = yes
}

preposition : adverb {
  spos = preposition
  gp = { id=PREP dia=123 }
}

conjunction : adverb {
  spos = conjunction
  gp = { id=CONJ dia=12 }
}

connector : adverb {
  spos = connector
  gp = { id=CONNEC dia=12 }
}

negation : adverb {
  spos = negation
}

coordination : adverb {
  spos = coordination
  gp = { id=COORD dia=12 }
}

quote : noun { 
spos = quote
}
// =======================================================
//               COMMON VERBS
// =======================================================


// french-------------------------------------------------
admirer : "v_dt_DEFAULT"
donner : "v_3_DEFAULT"
dormir : "v_it_DEFAULT"
être : "être"
exagérer : "v_it_DEFAULT"
lire : "v_dt_DEFAULT"
manger : "v_dt_DEFAULT"
plaire : "plaire"



/*
=======================================================
                   PREDICATE CLASSES
=======================================================
*/

//french
"adj_de_v": adjective {
  gp = { id=NP_COPULA_adj_pour_NP_de_V 		dia=1} // Il est possible pour Paul de voir le chat.
  gp = { id=Exp_COPULA_adj_que_V 		dia=1} // Il est possible que Paul voie le chat.
  lf = { name = Oper0
         value = être 
  }
}

"v_dt_DEFAULT": verb {
  gp = { id=NP_V_NP		dia=12} // Paul voit Marie.
}

"v_it_DEFAULT": verb {
  gp = { id=NP_V		dia=1} // Paul dort.
}

"être": verb {
  spos = copula
  gp = { id=COPULA		dia=12} // La ville est jolie.
}

///// CONTROL AND RAISING VERBS //////

accepter : "accepter"
choisir : "accepter"
comploter : "accepter"
entreprendre : "accepter"
essayer : "accepter"
exiger : "accepter"
imaginer : "accepter"
jurer : "accepter"
menacer : "accepter"
mériter : "accepter"
oublier : "accepter"
refuser : "accepter"
risquer : "accepter"
résoudre : "accepter"
se_assurer : "accepter"
se_contenter : "accepter"
se_dépêcher : "accepter"
se_efforcer : "accepter"
se_rappeler : "accepter"
se_soucier : "accepter"
éviter : "accepter"
accuser : "accuser"
avertir : "accuser"
convaincre : "accuser"
presser : "accuser"
prier : "accuser"
adorer : "adorer"
détester : "adorer"
envoyer : "adorer"
espérer : "adorer"
nier : "adorer"
oser : "adorer"
partir : "adorer"
préférer : "adorer"
prétendre : "adorer"
prévoir : "adorer"
souhaiter : "adorer"
vouloir : "adorer"
aider : "aider"
appeler : "aider"
engager : "aider"
inciter : "aider"
aimer : "aimer"
entendre : "aimer"
laisser : "aimer"
regarder : "aimer"
voir : "aimer"
aller : "aller"
devoir : "aller"
pouvoir : "aller"
amener : "amener"
autoriser : "amener"
conduire : "amener"
déterminer : "amener"
encourager : "amener"
forcer : "amener"
inviter : "amener"
obliger : "amener"
résoudre_2 : "amener"
se_plaire : "amener"
apparaître : "apparaître"
apprendre : "apprendre"
arrêter : "arrêter"
avoir_à : "avoir_à"
chercher : "chercher"
conspirer : "chercher"
contribuer : "chercher"
hésiter : "chercher"
parvenir : "chercher"
se_accorder : "chercher"
se_limiter : "chercher"
se_préparer : "chercher"
se_résigner : "chercher"
tarder : "chercher"
tenir : "chercher"
tenter : "chercher"
viser : "chercher"
commencer : "commencer"
conserver : "conserver"
continuer : "continuer"
contraindre : "contraindre"
demander : "demander"
décider : "décider"
déclarer : "déclarer"
garder : "déclarer"
prouver : "déclarer"
rendre : "déclarer"
faire : "faire"
finir : "finir"
ordonner : "ordonner"
paraître : "paraître"
permettre : "permettre"
promettre : "permettre"
proposer : "permettre"
savoir : "savoir"
sembler : "sembler"
suffire : "suffire"
trouver : "trouver"
venir_de : "venir_de"
échouer : "échouer"
"accepter": verb {
	gp = { id=N_V_de_Vinf	dia=12 }
}

"accuser": verb {
	gp = { id=N_V_N_de_Vinf	dia=123 }
}

"adorer": verb {
	gp = { id=N_V_Vinf	dia=12 }
}

"aider": verb {
	gp = { id=N_V_N_à_Vinf	dia=123 }
	gp = { id=N_V_à_Vinf	dia=12 }
}

"aimer": verb {
	gp = { id=N_V_N_Vinf	dia=123 }
	gp = { id=N_V_Vinf	dia=12 }
}

"aller": verb {
	gp = { id=N_Vrs_Vinf	dia=1 }
}

"amener": verb {
	gp = { id=N_V_N_à_Vinf	dia=123 }
}

"apparaître": verb {
	gp = { id=Exp_V_ADJ_de_Vinf	dia=X1 }
	gp = { id=Exp_V_ADJ_que_Vfin	dia=X1 }
	gp = { id=Exp_V_que_Vfin	dia=X1 }
	gp = { id=N_V	dia=1 }
	gp = { id=N_V_ADJ	dia=1 }
	gp = { id=N_V_à_N	dia=12 }
}

"apprendre": verb {
	gp = { id=N_V_à_N_à_Vinf	dia=123 }
	gp = { id=N_V_à_Vinf	dia=12 }
}

"arrêter": verb {
	gp = { id=N_V	dia=1 }
	gp = { id=N_V_N	dia=12 }
	gp = { id=N_Vrs_de_Vinf	dia=1 }
}

"avoir_à": verb {
	gp = { id=N_Vrs_à_Vinf	dia=1 }
}

"chercher": verb {
	gp = { id=N_V_à_Vinf	dia=12 }
}

"commencer": verb {
	gp = { id=N_V	dia=1 }
	gp = { id=N_V_N	dia=12 }
	gp = { id=N_V_N_avec_N	dia=123 }
	gp = { id=N_V_N_par_N	dia=123 }
	gp = { id=N_V_par_N	dia=12 }
	gp = { id=N_V_à_N	dia=12 }
	gp = { id=N_Vrs_par_Vinf	dia=1 }
	gp = { id=N_Vrs_à_Vinf	dia=1 }
}

"conserver": verb {
}

"continuer": verb {
	gp = { id=N_V	dia=1 }
	gp = { id=N_V_ADV	dia=1 }
	gp = { id=N_V_N	dia=12 }
	gp = { id=N_Vrs_de_Vinf	dia=1 }
	gp = { id=N_Vrs_à_Vinf	dia=1 }
}

"contraindre": verb {
	gp = { id=N_V_N_de_Vinf	dia=123 }
	gp = { id=N_V_N_à_Vinf	dia=123 }
}

"demander": verb {
	gp = { id=N_V_de_Vinf	dia=12 }
	gp = { id=N_V_de_Vinf_à_N	dia=123 }
	gp = { id=N_V_de_Vinf_à_N_par_N	dia=1234 }
	gp = { id=N_V_à_Vinf	dia=12 }
}

"décider": verb {
	gp = { id=N_V_de_Vinf	dia=12 }
	gp = { id=N_V_que_Vfin	dia=12 }
	gp = { id=N_V_à_Vinf	dia=12 }
}

"déclarer": verb {
	gp = { id=N_V_ADJ_N	dia=12 }
}

"faire": verb {
	gp = { id=N_Vrs_N_Vinf	dia=1 }
	gp = { id=N_Vrs_Vinf	dia=1 }
}

"finir": verb {
	gp = { id=N_V	dia=1 }
	gp = { id=N_V_N	dia=12 }
	gp = { id=N_Vrs_de_Vinf	dia=1 }
	gp = { id=N_Vrs_par_Vinf	dia=1 }
}

"ordonner": verb {
	gp = { id=N_V_de_Vinf_à_N	dia=123 }
}

"paraître": verb {
	gp = { id=N_V_ADJ	dia=1 }
	gp = { id=N_V_N	dia=12 }
	gp = { id=N_V_N_à_N	dia=123 }
	gp = { id=N_Vrs_Vinf	dia=1 }
}

"permettre": verb {
	gp = { id=N_V_de_Vinf	dia=12 }
	gp = { id=N_V_de_Vinf_à_N	dia=123 }
}

"savoir": verb {
	gp = { id=N_V_Vfin	dia=12 }
	gp = { id=N_V_Vinf	dia=12 }
}

"sembler": verb {
	//gp = { id=Exp_V_ADJ_que_Vfin	dia=X1 }
	//gp = { id=Exp_V_que_Vfin_à_N	dia=X1 }
	gp = { id=Exp_V_que_Vsub	dia=X1 }
	//gp = { id=N_V_ADJ	dia=1 }
	//gp = { id=N_V_ADJ_à_N	dia=12 }
	gp = { id=N_Vrs_Vinf	dia=1 }
}

"suffire": verb {
	gp = { id=N_V_de_Vinf	dia=12 }
	gp = { id=N_V_à_Vinf	dia=12 }
}

"trouver": verb {
	gp = { id=N_V_ADJ_N	dia=12 }
	gp = { id=N_V_ADJ_N_de_Vinf	dia=123 }
	gp = { id=N_V_ADJ_de_Vinf	dia=12 }
}

"venir_de": verb {
	gp = { id=N_Vrs_de_Vinf	dia=1 }
}

"échouer": verb {
	gp = { id=N_V	dia=1 }
	gp = { id=N_V_sur_N	dia=12 }
	gp = { id=N_Vrs_à_Vinf	dia=1 }
}

//////////////////////////////////////////
//      NON-VERBAL LEXICAL ENTRIES      //
//////////////////////////////////////////

schtroumpf : noun
schtroumpfant : adjective
schtroumpfer : "schtroumpfer"
"schtroumpfer" : "v_dt_DEFAULT"


à : preposition
avec : preposition
bras : noun_body
chat : noun
de : preposition
livre : noun
le : determiner
il_expl : pronoun
intacte : adjective
information : pronoun
joli : adjective
main_nb : noun_body
maire : noun
moi : pronoun
par : preposition
police : noun
possible : "adj_de_v"
pour : preposition
PRO : noun
que : conjunction
recteur : noun
repris : adjective
session : noun
ville : noun
voleur : noun
voisin : noun_of

}